apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cassandra.name" . }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "cassandra.name" . }}-headless
  selector:
    matchLabels: {{- include "cassandra.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "cassandra.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: cassandra
          command:
            - bash
            - -ec
            - |
              # Node 0 is the password seeder
              if [[ $POD_NAME =~ (.*)-0$ ]]; then
                  echo "Setting node as password seeder"
                  export CASSANDRA_PASSWORD_SEEDER=yes
              else
                  # Only node 0 will execute the startup initdb scripts
                  export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /opt/bitnami/scripts/cassandra/entrypoint.sh /opt/bitnami/scripts/cassandra/run.sh
          image: {{ .Values.image.name }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: CASSANDRA_CLUSTER_NAME
              value: {{ .Values.cluster.name }}
            - name: CASSANDRA_SEEDS
              value: {{ (include "cassandra.seeds" .) | quote }}
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}
                  key: cassandra-password
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CASSANDRA_USER
              value: {{ .Values.dbUser.user | quote }}
            - name: CASSANDRA_NUM_TOKENS
              value: {{ .Values.cluster.numTokens | quote }}
            - name: CASSANDRA_DATACENTER
              value: {{ .Values.cluster.datacenter }}
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: {{ .Values.cluster.endpointSnitch }}
            - name: CASSANDRA_KEYSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/keystore"
            - name: CASSANDRA_TRUSTSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/truststore"
            - name: CASSANDRA_RACK
              value: {{ .Values.cluster.rack }}
            {{- if .Values.containerPorts.intra  }}
            - name: CASSANDRA_TRANSPORT_PORT_NUMBER
              value: {{ .Values.containerPorts.intra | quote }}
            {{- end }}
            {{- if .Values.containerPorts.cql }}
            - name: CASSANDRA_CQL_PORT_NUMBER
              value: {{ .Values.containerPorts.cql | quote }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool info | grep "Native Transport active: true"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool status | grep -E "^UN\\s+${POD_IP}"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool status | grep -E "^UN\\s+${POD_IP}"
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  {{- if not .Values.persistence.enabled }}
                  - nodetool decommission
                  {{- else }}
                  - nodetool drain
                  {{- end }}
          ports:
            - name: intra
              containerPort: {{ .Values.containerPorts.intra }}
            - name: cql
              containerPort: {{ .Values.containerPorts.cql }}
          {{- if .Values.resources }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
            {{ if .Values.existingConfiguration }}
            - name: configurations
              mountPath: {{ .Values.persistence.mountPath }}/conf
            {{- end }}
      volumes:
        {{- if .Values.existingConfiguration }}
        - name: configurations
          configMap:
            name: {{ tpl .Values.existingConfiguration $ }}
        {{- end }}
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
